
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f4  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000258  000008f4  000008f4  00000948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000020  00000b4c  00000b4c  00000ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  00000b6c  00000b6c  00000bc0  2**2
                  ALLOC
  4 .debug_abbrev 0000029e  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005ef  00000000  00000000  000015d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001e0  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000019d  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000098  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000239  00000000  00000000  0000217d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  000023c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 81 	calli 6d0 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0b 70 	ori gp,gp,0xb70
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0b 6c 	ori r1,r1,0xb6c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0b f8 	ori r3,r3,0xbf8

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 5c 	calli 2ac <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <writeint>:
 */

#include "soc-hw.h"

inline void writeint(uint32_t val)
{
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
 21c:	34 0b 00 08 	mvi r11,8
 220:	b8 20 60 00 	mv r12,r1
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 224:	34 0d 00 09 	mvi r13,9
 228:	e0 00 00 02 	bi 230 <writeint+0x28>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
		val <<= 4;
 22c:	3d 8c 00 04 	sli r12,r12,4
inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
 230:	01 82 00 1c 	srui r2,r12,28
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
 234:	34 41 00 37 	addi r1,r2,55
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 238:	51 a2 00 0a 	bgeu r13,r2,260 <writeint+0x58>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
 23c:	35 6b ff ff 	addi r11,r11,-1
 240:	f8 00 01 8a 	calli 868 <uart_putchar>

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 244:	5d 60 ff fa 	bne r11,r0,22c <writeint+0x24>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
		val <<= 4;
	}
}
 248:	2b 9d 00 04 	lw ra,(sp+4)
 24c:	2b 8b 00 10 	lw r11,(sp+16)
 250:	2b 8c 00 0c 	lw r12,(sp+12)
 254:	2b 8d 00 08 	lw r13,(sp+8)
 258:	37 9c 00 10 	addi sp,sp,16
 25c:	c3 a0 00 00 	ret
	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
 260:	34 41 00 30 	addi r1,r2,48
 264:	e3 ff ff f6 	bi 23c <writeint+0x34>

00000268 <test2>:
		val <<= 4;
	}
}

void test2() {
 268:	37 9c ff fc 	addi sp,sp,-4
 26c:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar('b');   
 270:	34 01 00 62 	mvi r1,98
 274:	f8 00 01 7d 	calli 868 <uart_putchar>
}
 278:	2b 9d 00 04 	lw ra,(sp+4)
 27c:	37 9c 00 04 	addi sp,sp,4
 280:	c3 a0 00 00 	ret

00000284 <test>:

void test() {
 284:	37 9c ff fc 	addi sp,sp,-4
 288:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar('a');
 28c:	34 01 00 61 	mvi r1,97
 290:	f8 00 01 76 	calli 868 <uart_putchar>
    test2();
 294:	fb ff ff f5 	calli 268 <test2>
    uart_putchar('c');
 298:	34 01 00 63 	mvi r1,99
 29c:	f8 00 01 73 	calli 868 <uart_putchar>
} 
 2a0:	2b 9d 00 04 	lw ra,(sp+4)
 2a4:	37 9c 00 04 	addi sp,sp,4
 2a8:	c3 a0 00 00 	ret

000002ac <main>:
volatile uint8_t *p2;

extern uint32_t tic_msec;

int main()
{
 2ac:	37 9c ff 94 	addi sp,sp,-108
 2b0:	5b 8b 00 44 	sw (sp+68),r11
 2b4:	5b 8c 00 40 	sw (sp+64),r12
 2b8:	5b 8d 00 3c 	sw (sp+60),r13
 2bc:	5b 8e 00 38 	sw (sp+56),r14
 2c0:	5b 8f 00 34 	sw (sp+52),r15
 2c4:	5b 90 00 30 	sw (sp+48),r16
 2c8:	5b 91 00 2c 	sw (sp+44),r17
 2cc:	5b 92 00 28 	sw (sp+40),r18
 2d0:	5b 93 00 24 	sw (sp+36),r19
 2d4:	5b 94 00 20 	sw (sp+32),r20
 2d8:	5b 95 00 1c 	sw (sp+28),r21
 2dc:	5b 96 00 18 	sw (sp+24),r22
 2e0:	5b 97 00 14 	sw (sp+20),r23
 2e4:	5b 98 00 10 	sw (sp+16),r24
 2e8:	5b 99 00 0c 	sw (sp+12),r25
 2ec:	5b 9b 00 08 	sw (sp+8),fp
 2f0:	5b 9d 00 04 	sw (sp+4),ra
 2f4:	78 01 00 00 	mvhi r1,0x0
 2f8:	5b 81 00 48 	sw (sp+72),r1
 2fc:	78 01 00 00 	mvhi r1,0x0
 300:	5b 81 00 4c 	sw (sp+76),r1
 304:	78 01 00 00 	mvhi r1,0x0
 308:	5b 81 00 50 	sw (sp+80),r1
 30c:	78 01 00 00 	mvhi r1,0x0
 310:	5b 81 00 54 	sw (sp+84),r1
 314:	78 01 00 00 	mvhi r1,0x0
 318:	5b 81 00 58 	sw (sp+88),r1
 31c:	78 01 00 00 	mvhi r1,0x0
 320:	5b 81 00 60 	sw (sp+96),r1
 324:	78 01 00 00 	mvhi r1,0x0
 328:	5b 81 00 68 	sw (sp+104),r1
 32c:	78 01 00 00 	mvhi r1,0x0
 330:	5b 81 00 5c 	sw (sp+92),r1
 334:	78 01 00 00 	mvhi r1,0x0
 338:	5b 81 00 64 	sw (sp+100),r1
 33c:	78 01 00 00 	mvhi r1,0x0
 340:	5b 81 00 6c 	sw (sp+108),r1
 344:	2b 81 00 48 	lw r1,(sp+72)
 348:	78 17 00 00 	mvhi r23,0x0
 34c:	78 0b 00 00 	mvhi r11,0x0
 350:	38 21 09 d4 	ori r1,r1,0x9d4
 354:	5b 81 00 48 	sw (sp+72),r1
 358:	2b 81 00 4c 	lw r1,(sp+76)
 35c:	78 16 00 00 	mvhi r22,0x0
 360:	78 15 00 00 	mvhi r21,0x0
 364:	38 21 09 f0 	ori r1,r1,0x9f0
 368:	5b 81 00 4c 	sw (sp+76),r1
 36c:	2b 81 00 50 	lw r1,(sp+80)
 370:	78 14 00 00 	mvhi r20,0x0
 374:	78 13 00 00 	mvhi r19,0x0
 378:	38 21 0a 08 	ori r1,r1,0xa08
 37c:	5b 81 00 50 	sw (sp+80),r1
 380:	2b 81 00 54 	lw r1,(sp+84)
 384:	78 12 00 00 	mvhi r18,0x0
 388:	78 11 00 00 	mvhi r17,0x0
 38c:	38 21 0a 20 	ori r1,r1,0xa20
 390:	5b 81 00 54 	sw (sp+84),r1
 394:	2b 81 00 58 	lw r1,(sp+88)
 398:	78 10 00 00 	mvhi r16,0x0
 39c:	78 0f 00 00 	mvhi r15,0x0
 3a0:	38 21 0a 38 	ori r1,r1,0xa38
 3a4:	5b 81 00 58 	sw (sp+88),r1
 3a8:	2b 81 00 60 	lw r1,(sp+96)
 3ac:	78 0e 00 00 	mvhi r14,0x0
 3b0:	78 0d 00 00 	mvhi r13,0x0
 3b4:	38 21 0a 50 	ori r1,r1,0xa50
 3b8:	5b 81 00 60 	sw (sp+96),r1
 3bc:	2b 81 00 68 	lw r1,(sp+104)
 3c0:	78 0c 00 00 	mvhi r12,0x0
 3c4:	78 19 00 00 	mvhi r25,0x0
 3c8:	38 21 0a 68 	ori r1,r1,0xa68
 3cc:	5b 81 00 68 	sw (sp+104),r1
 3d0:	2b 81 00 5c 	lw r1,(sp+92)
 3d4:	78 1b 00 00 	mvhi fp,0x0
 3d8:	3a f7 08 f4 	ori r23,r23,0x8f4
 3dc:	38 21 0a 84 	ori r1,r1,0xa84
 3e0:	5b 81 00 5c 	sw (sp+92),r1
 3e4:	2b 81 00 64 	lw r1,(sp+100)
 3e8:	39 6b 09 84 	ori r11,r11,0x984
 3ec:	3a d6 09 24 	ori r22,r22,0x924
 3f0:	38 21 0a a0 	ori r1,r1,0xaa0
 3f4:	5b 81 00 64 	sw (sp+100),r1
 3f8:	2b 81 00 6c 	lw r1,(sp+108)
 3fc:	3a b5 09 48 	ori r21,r21,0x948
 400:	3a 94 09 58 	ori r20,r20,0x958
 404:	38 21 0a b8 	ori r1,r1,0xab8
 408:	3a 73 09 64 	ori r19,r19,0x964
 40c:	3a 52 09 70 	ori r18,r18,0x970
 410:	3a 31 09 7c 	ori r17,r17,0x97c
 414:	3a 10 09 88 	ori r16,r16,0x988
 418:	39 ef 09 94 	ori r15,r15,0x994
 41c:	39 ce 09 a4 	ori r14,r14,0x9a4
 420:	39 ad 09 b4 	ori r13,r13,0x9b4
 424:	39 8c 09 c4 	ori r12,r12,0x9c4
 428:	3b 39 0a e4 	ori r25,r25,0xae4
 42c:	5b 81 00 6c 	sw (sp+108),r1
 430:	3b 7b 0a d0 	ori fp,fp,0xad0
	uart_putstr( "\n" );
	

	char producto1 = uart_getchar();

	switch(producto1)
 434:	34 18 00 18 	mvi r24,24



	for(;;)
{    
	uart_putstr( "                 BIENVENIDO AL SUPERMERCADO\n" );
 438:	ba e0 08 00 	mv r1,r23
 43c:	f8 00 01 14 	calli 88c <uart_putstr>
	uart_putstr( "\n" );	
 440:	b9 60 08 00 	mv r1,r11
 444:	f8 00 01 12 	calli 88c <uart_putstr>
	uart_putstr( "Seleccione el producto deseado:\n" );
 448:	ba c0 08 00 	mv r1,r22
 44c:	f8 00 01 10 	calli 88c <uart_putstr>
	uart_putstr( "\n" );
 450:	b9 60 08 00 	mv r1,r11
 454:	f8 00 01 0e 	calli 88c <uart_putstr>
	uart_putstr( "0. Chocolatina\n" );	
 458:	ba a0 08 00 	mv r1,r21
 45c:	f8 00 01 0c 	calli 88c <uart_putstr>
	uart_putstr( "1. Leche\n" );
 460:	ba 80 08 00 	mv r1,r20
 464:	f8 00 01 0a 	calli 88c <uart_putstr>
	uart_putstr( "2. Papas\n" );
 468:	ba 60 08 00 	mv r1,r19
 46c:	f8 00 01 08 	calli 88c <uart_putstr>
	uart_putstr( "3. Queso\n" );
 470:	ba 40 08 00 	mv r1,r18
 474:	f8 00 01 06 	calli 88c <uart_putstr>
	uart_putstr( "4. Arepa\n" );
 478:	ba 20 08 00 	mv r1,r17
 47c:	f8 00 01 04 	calli 88c <uart_putstr>
	uart_putstr( "5. Yogurt\n" );
 480:	ba 00 08 00 	mv r1,r16
 484:	f8 00 01 02 	calli 88c <uart_putstr>
	uart_putstr( "6. Chocorramo\n" );
 488:	b9 e0 08 00 	mv r1,r15
 48c:	f8 00 01 00 	calli 88c <uart_putstr>
	uart_putstr( "7. Pan Bimbo\n" );
 490:	b9 c0 08 00 	mv r1,r14
 494:	f8 00 00 fe 	calli 88c <uart_putstr>
	uart_putstr( "8. Todorico\n" );
 498:	b9 a0 08 00 	mv r1,r13
 49c:	f8 00 00 fc 	calli 88c <uart_putstr>
	uart_putstr( "9. 5 Huevos\n" );
 4a0:	b9 80 08 00 	mv r1,r12
 4a4:	f8 00 00 fa 	calli 88c <uart_putstr>
	uart_putstr( "\n" );
 4a8:	b9 60 08 00 	mv r1,r11
 4ac:	f8 00 00 f8 	calli 88c <uart_putstr>
	uart_putstr( "\n" );
 4b0:	b9 60 08 00 	mv r1,r11
 4b4:	f8 00 00 f6 	calli 88c <uart_putstr>
	

	char producto1 = uart_getchar();
 4b8:	f8 00 00 e3 	calli 844 <uart_getchar>

	switch(producto1)
 4bc:	34 22 ff d0 	addi r2,r1,-48
 4c0:	20 42 00 ff 	andi r2,r2,0xff
 4c4:	54 58 00 55 	bgu r2,r24,618 <main+0x36c>
 4c8:	3c 42 00 02 	sli r2,r2,2
 4cc:	b7 22 10 00 	add r2,r25,r2
 4d0:	28 42 00 00 	lw r2,(r2+0)
 4d4:	c0 40 00 00 	b r2
		segments(0,0,2,2);
		uart_putstr( "Seleccionaste Todorico\n" );
		break;

		case 0x48:
		segments(0,0,5,1);
 4d8:	34 02 00 00 	mvi r2,0
 4dc:	34 03 00 05 	mvi r3,5
 4e0:	34 04 00 01 	mvi r4,1
 4e4:	34 01 00 00 	mvi r1,0
 4e8:	f8 00 00 f6 	calli 8c0 <segments>
		uart_putstr( "Seleccionaste 5 Huevos\n" );
 4ec:	2b 81 00 6c 	lw r1,(sp+108)
 4f0:	f8 00 00 e7 	calli 88c <uart_putstr>
		break;
 4f4:	e3 ff ff d1 	bi 438 <main+0x18c>
		segments(0,5,6,3);
		uart_putstr( "Seleccionaste Pan Bimbo\n" );
		break;

		case 0x46:
		segments(0,0,2,2);
 4f8:	34 02 00 00 	mvi r2,0
 4fc:	34 03 00 02 	mvi r3,2
 500:	34 04 00 02 	mvi r4,2
 504:	34 01 00 00 	mvi r1,0
 508:	f8 00 00 ee 	calli 8c0 <segments>
		uart_putstr( "Seleccionaste Todorico\n" );
 50c:	2b 81 00 64 	lw r1,(sp+100)
 510:	f8 00 00 df 	calli 88c <uart_putstr>
		break;
 514:	e3 ff ff c9 	bi 438 <main+0x18c>
		segments(0,0,8,15);
		uart_putstr( "Seleccionaste Chocorramo\n" );
		break;

		case 0x44:
		segments(0,5,6,3);
 518:	34 02 00 05 	mvi r2,5
 51c:	34 03 00 06 	mvi r3,6
 520:	34 04 00 03 	mvi r4,3
 524:	34 01 00 00 	mvi r1,0
 528:	f8 00 00 e6 	calli 8c0 <segments>
		uart_putstr( "Seleccionaste Pan Bimbo\n" );
 52c:	2b 81 00 5c 	lw r1,(sp+92)
 530:	f8 00 00 d7 	calli 88c <uart_putstr>
		break;
 534:	e3 ff ff c1 	bi 438 <main+0x18c>
		segments(0,5,7,1);
		uart_putstr( "Seleccionaste Yogurt\n" );
		break;

		case 0x42:
		segments(0,0,8,15);
 538:	34 02 00 00 	mvi r2,0
 53c:	34 03 00 08 	mvi r3,8
 540:	34 04 00 0f 	mvi r4,15
 544:	34 01 00 00 	mvi r1,0
 548:	f8 00 00 de 	calli 8c0 <segments>
		uart_putstr( "Seleccionaste Chocorramo\n" );
 54c:	2b 81 00 68 	lw r1,(sp+104)
 550:	f8 00 00 cf 	calli 88c <uart_putstr>
		break;
 554:	e3 ff ff b9 	bi 438 <main+0x18c>
		segments(0,0,7,1);
		uart_putstr( "Seleccionaste Arepa\n" );	
		break;

		case 0x40:
		segments(0,5,7,1);
 558:	34 02 00 05 	mvi r2,5
 55c:	34 03 00 07 	mvi r3,7
 560:	34 04 00 01 	mvi r4,1
 564:	34 01 00 00 	mvi r1,0
 568:	f8 00 00 d6 	calli 8c0 <segments>
		uart_putstr( "Seleccionaste Yogurt\n" );
 56c:	2b 81 00 60 	lw r1,(sp+96)
 570:	f8 00 00 c7 	calli 88c <uart_putstr>
		break;
 574:	e3 ff ff b1 	bi 438 <main+0x18c>
		segments(0,5,2,4);
		uart_putstr( "Seleccionaste Queso\n" );
		break;

		case 0x38:
		segments(0,0,7,1);
 578:	34 02 00 00 	mvi r2,0
 57c:	34 03 00 07 	mvi r3,7
 580:	34 04 00 01 	mvi r4,1
 584:	34 01 00 00 	mvi r1,0
 588:	f8 00 00 ce 	calli 8c0 <segments>
		uart_putstr( "Seleccionaste Arepa\n" );	
 58c:	2b 81 00 58 	lw r1,(sp+88)
 590:	f8 00 00 bf 	calli 88c <uart_putstr>
		break;
 594:	e3 ff ff a9 	bi 438 <main+0x18c>
		segments(0,0,3,1);
		uart_putstr( "Seleccionaste Papas\n" );	
		break;

		case 0x36:
		segments(0,5,2,4);
 598:	34 02 00 05 	mvi r2,5
 59c:	34 03 00 02 	mvi r3,2
 5a0:	34 04 00 04 	mvi r4,4
 5a4:	34 01 00 00 	mvi r1,0
 5a8:	f8 00 00 c6 	calli 8c0 <segments>
		uart_putstr( "Seleccionaste Queso\n" );
 5ac:	2b 81 00 54 	lw r1,(sp+84)
 5b0:	f8 00 00 b7 	calli 88c <uart_putstr>
		break;
 5b4:	e3 ff ff a1 	bi 438 <main+0x18c>
		segments(0,0,5,2);
		uart_putstr( "Seleccionaste Leche\n" );	
		break;

		case 0x34:
		segments(0,0,3,1);
 5b8:	34 02 00 00 	mvi r2,0
 5bc:	34 03 00 03 	mvi r3,3
 5c0:	34 04 00 01 	mvi r4,1
 5c4:	34 01 00 00 	mvi r1,0
 5c8:	f8 00 00 be 	calli 8c0 <segments>
		uart_putstr( "Seleccionaste Papas\n" );	
 5cc:	2b 81 00 50 	lw r1,(sp+80)
 5d0:	f8 00 00 af 	calli 88c <uart_putstr>
		break;
 5d4:	e3 ff ff 99 	bi 438 <main+0x18c>
		segments(0,0,0,1);
		uart_putstr( "Seleccionaste Chocolatina\n" );
		break;

		case 0x32:
		segments(0,0,5,2);
 5d8:	34 02 00 00 	mvi r2,0
 5dc:	34 03 00 05 	mvi r3,5
 5e0:	34 04 00 02 	mvi r4,2
 5e4:	34 01 00 00 	mvi r1,0
 5e8:	f8 00 00 b6 	calli 8c0 <segments>
		uart_putstr( "Seleccionaste Leche\n" );	
 5ec:	2b 81 00 4c 	lw r1,(sp+76)
 5f0:	f8 00 00 a7 	calli 88c <uart_putstr>
		break;
 5f4:	e3 ff ff 91 	bi 438 <main+0x18c>
	char producto1 = uart_getchar();

	switch(producto1)
	{
		case 0x30:
		segments(0,0,0,1);
 5f8:	34 02 00 00 	mvi r2,0
 5fc:	34 03 00 00 	mvi r3,0
 600:	34 04 00 01 	mvi r4,1
 604:	34 01 00 00 	mvi r1,0
 608:	f8 00 00 ae 	calli 8c0 <segments>
		uart_putstr( "Seleccionaste Chocolatina\n" );
 60c:	2b 81 00 48 	lw r1,(sp+72)
 610:	f8 00 00 9f 	calli 88c <uart_putstr>
		break;
 614:	e3 ff ff 89 	bi 438 <main+0x18c>
		segments(0,0,5,1);
		uart_putstr( "Seleccionaste 5 Huevos\n" );
		break;

		default:
		uart_putstr( "Entrada no valida\n" );
 618:	bb 60 08 00 	mv r1,fp
 61c:	f8 00 00 9c 	calli 88c <uart_putstr>
		uart_putstr( "\n" );
 620:	b9 60 08 00 	mv r1,r11
 624:	f8 00 00 9a 	calli 88c <uart_putstr>
 628:	e3 ff ff 84 	bi 438 <main+0x18c>

0000062c <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 62c:	c3 a0 00 00 	ret

00000630 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 630:	78 01 00 00 	mvhi r1,0x0
 634:	38 21 0b f4 	ori r1,r1,0xbf4
 638:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 63c:	78 02 00 00 	mvhi r2,0x0
 640:	38 42 0b 58 	ori r2,r2,0xb58
 644:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 648:	34 63 00 01 	addi r3,r3,1
 64c:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 650:	34 01 00 0e 	mvi r1,14
 654:	58 41 00 00 	sw (r2+0),r1
}
 658:	c3 a0 00 00 	ret

0000065c <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 65c:	78 02 00 00 	mvhi r2,0x0
 660:	38 42 0b 54 	ori r2,r2,0xb54
	   timer0->tcr0 = 0xAA;
 664:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 668:	28 44 00 00 	lw r4,(r2+0)
	   timer0->tcr0 = 0xAA;
 66c:	38 21 0b 58 	ori r1,r1,0xb58
	   gpio0->ctrl=0x55;
 670:	78 02 00 00 	mvhi r2,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 674:	28 23 00 00 	lw r3,(r1+0)
	   gpio0->ctrl=0x55;
 678:	38 42 0b 5c 	ori r2,r2,0xb5c
	   spi0->rxtx=1;
 67c:	78 01 00 00 	mvhi r1,0x0

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 680:	28 42 00 00 	lw r2,(r2+0)
	   spi0->rxtx=1;
 684:	38 21 0b 60 	ori r1,r1,0xb60

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 688:	34 05 00 1e 	mvi r5,30
 68c:	58 85 00 04 	sw (r4+4),r5
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
	   spi0->rxtx=1;
 690:	28 21 00 00 	lw r1,(r1+0)
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 694:	34 04 00 aa 	mvi r4,170
 698:	58 64 00 00 	sw (r3+0),r4
	   gpio0->ctrl=0x55;
 69c:	34 03 00 55 	mvi r3,85
 6a0:	58 43 00 00 	sw (r2+0),r3
	   spi0->rxtx=1;
 6a4:	34 02 00 01 	mvi r2,1
 6a8:	58 22 00 00 	sw (r1+0),r2
	   spi0->nop1=2;
 6ac:	34 02 00 02 	mvi r2,2
 6b0:	58 22 00 04 	sw (r1+4),r2
	   spi0->cs=3;
 6b4:	34 02 00 03 	mvi r2,3
 6b8:	58 22 00 08 	sw (r1+8),r2
	   spi0->divisor=4;
 6bc:	34 02 00 04 	mvi r2,4
 6c0:	58 22 00 10 	sw (r1+16),r2
	   spi0->nop2=5;
 6c4:	34 02 00 05 	mvi r2,5
 6c8:	58 22 00 0c 	sw (r1+12),r2

}
 6cc:	c3 a0 00 00 	ret

000006d0 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 6d0:	37 9c ff f0 	addi sp,sp,-16
 6d4:	5b 8b 00 10 	sw (sp+16),r11
 6d8:	5b 8c 00 0c 	sw (sp+12),r12
 6dc:	5b 8d 00 08 	sw (sp+8),r13
 6e0:	5b 9d 00 04 	sw (sp+4),ra
 6e4:	78 0b 00 00 	mvhi r11,0x0
 6e8:	39 6b 0b 74 	ori r11,r11,0xb74
 6ec:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 6f0:	35 6d 00 80 	addi r13,r11,128
 6f4:	e0 00 00 04 	bi 704 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 6f8:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 6fc:	45 6d 00 08 	be r11,r13,71c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 700:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 704:	21 81 00 01 	andi r1,r12,0x1
 708:	44 20 ff fc 	be r1,r0,6f8 <irq_handler+0x28>
 70c:	29 61 00 00 	lw r1,(r11+0)
 710:	35 6b 00 04 	addi r11,r11,4
 714:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 718:	5d 6d ff fa 	bne r11,r13,700 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 71c:	2b 9d 00 04 	lw ra,(sp+4)
 720:	2b 8b 00 10 	lw r11,(sp+16)
 724:	2b 8c 00 0c 	lw r12,(sp+12)
 728:	2b 8d 00 08 	lw r13,(sp+8)
 72c:	37 9c 00 10 	addi sp,sp,16
 730:	c3 a0 00 00 	ret

00000734 <isr_init>:

void isr_init()
{
 734:	78 01 00 00 	mvhi r1,0x0
 738:	78 02 00 00 	mvhi r2,0x0
 73c:	38 21 0b 74 	ori r1,r1,0xb74
 740:	38 42 06 2c 	ori r2,r2,0x62c
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 744:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 748:	58 22 00 00 	sw (r1+0),r2
 74c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 750:	5c 23 ff fe 	bne r1,r3,748 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 754:	c3 a0 00 00 	ret

00000758 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 758:	78 03 00 00 	mvhi r3,0x0
 75c:	3c 21 00 02 	sli r1,r1,2
 760:	38 63 0b 74 	ori r3,r3,0xb74
 764:	b4 61 18 00 	add r3,r3,r1
 768:	58 62 00 00 	sw (r3+0),r2
}
 76c:	c3 a0 00 00 	ret

00000770 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 770:	78 03 00 00 	mvhi r3,0x0
 774:	3c 21 00 02 	sli r1,r1,2
 778:	38 63 0b 74 	ori r3,r3,0xb74
 77c:	78 02 00 00 	mvhi r2,0x0
 780:	b4 61 18 00 	add r3,r3,r1
 784:	38 42 06 2c 	ori r2,r2,0x62c
 788:	58 62 00 00 	sw (r3+0),r2
}
 78c:	c3 a0 00 00 	ret

00000790 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 790:	78 04 00 00 	mvhi r4,0x0
 794:	38 84 0b 48 	ori r4,r4,0xb48
 798:	28 83 00 00 	lw r3,(r4+0)
 79c:	78 02 00 00 	mvhi r2,0x0
 7a0:	38 42 0b 58 	ori r2,r2,0xb58
 7a4:	28 42 00 00 	lw r2,(r2+0)
 7a8:	88 23 08 00 	mul r1,r1,r3
 7ac:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 7b0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 7b4:	34 01 00 08 	mvi r1,8
 7b8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 7bc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 7c0:	20 21 00 01 	andi r1,r1,0x1
 7c4:	44 20 ff fe 	be r1,r0,7bc <msleep+0x2c>
}
 7c8:	c3 a0 00 00 	ret

000007cc <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 7cc:	78 02 00 00 	mvhi r2,0x0
 7d0:	38 42 0b 58 	ori r2,r2,0xb58
 7d4:	28 42 00 00 	lw r2,(r2+0)
 7d8:	08 21 00 64 	muli r1,r1,100
 7dc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 7e0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 7e4:	34 01 00 08 	mvi r1,8
 7e8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 7ec:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 7f0:	20 21 00 01 	andi r1,r1,0x1
 7f4:	44 20 ff fe 	be r1,r0,7ec <nsleep+0x20>
}
 7f8:	c3 a0 00 00 	ret

000007fc <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 7fc:	78 01 00 00 	mvhi r1,0x0
 800:	38 21 0b 58 	ori r1,r1,0xb58
 804:	28 23 00 00 	lw r3,(r1+0)
 808:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 80c:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 810:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 814:	38 21 0b f4 	ori r1,r1,0xbf4

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 818:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 81c:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 820:	78 02 00 00 	mvhi r2,0x0
 824:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 828:	34 04 00 0e 	mvi r4,14
 82c:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 830:	38 21 0b 74 	ori r1,r1,0xb74
 834:	38 42 06 30 	ori r2,r2,0x630
 838:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 83c:	c3 a0 00 00 	ret

00000840 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 840:	c3 a0 00 00 	ret

00000844 <uart_getchar>:

char uart_getchar()
{   
 844:	78 01 00 00 	mvhi r1,0x0
 848:	38 21 0b 54 	ori r1,r1,0xb54
 84c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 850:	28 41 00 00 	lw r1,(r2+0)
 854:	20 21 00 01 	andi r1,r1,0x1
 858:	44 20 ff fe 	be r1,r0,850 <uart_getchar+0xc>
	return uart0->rxtx;
 85c:	28 41 00 04 	lw r1,(r2+4)
}
 860:	20 21 00 ff 	andi r1,r1,0xff
 864:	c3 a0 00 00 	ret

00000868 <uart_putchar>:

void uart_putchar(char c)
{
 868:	78 02 00 00 	mvhi r2,0x0
 86c:	38 42 0b 54 	ori r2,r2,0xb54
 870:	28 43 00 00 	lw r3,(r2+0)
 874:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 878:	28 62 00 00 	lw r2,(r3+0)
 87c:	20 42 00 10 	andi r2,r2,0x10
 880:	5c 40 ff fe 	bne r2,r0,878 <uart_putchar+0x10>
	uart0->rxtx = c;
 884:	58 61 00 04 	sw (r3+4),r1
}
 888:	c3 a0 00 00 	ret

0000088c <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 88c:	40 24 00 00 	lbu r4,(r1+0)
 890:	44 80 00 0b 	be r4,r0,8bc <uart_putstr+0x30>
 894:	78 02 00 00 	mvhi r2,0x0
 898:	38 42 0b 54 	ori r2,r2,0xb54
 89c:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 8a0:	28 62 00 00 	lw r2,(r3+0)
 8a4:	20 42 00 10 	andi r2,r2,0x10
 8a8:	5c 40 ff fe 	bne r2,r0,8a0 <uart_putstr+0x14>
	uart0->rxtx = c;
 8ac:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 8b0:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 8b4:	40 24 00 00 	lbu r4,(r1+0)
 8b8:	5c 82 ff fa 	bne r4,r2,8a0 <uart_putstr+0x14>
 8bc:	c3 a0 00 00 	ret

000008c0 <segments>:

void segments(uint32_t a, uint32_t b, uint32_t c, uint32_t d)
{
	
//	while () {
		BCD0->dato1 = a;
 8c0:	78 05 00 00 	mvhi r5,0x0
 8c4:	38 a5 0b 68 	ori r5,r5,0xb68
 8c8:	28 a5 00 00 	lw r5,(r5+0)
 8cc:	58 a1 00 00 	sw (r5+0),r1
		BCD0->dato2 = b;
 8d0:	58 a2 00 04 	sw (r5+4),r2
		BCD0->dato3 = c;	
 8d4:	58 a3 00 08 	sw (r5+8),r3
		BCD0->dato4 = d;
 8d8:	58 a4 00 0c 	sw (r5+12),r4
//	}
}
 8dc:	c3 a0 00 00 	ret

000008e0 <ps2_getchar>:
 * BDC Fuctions
 */

char ps2_getchar()
{
	ps20->ascii;
 8e0:	78 01 00 00 	mvhi r1,0x0
 8e4:	38 21 0b 64 	ori r1,r1,0xb64
 8e8:	28 22 00 00 	lw r2,(r1+0)
 8ec:	28 42 00 00 	lw r2,(r2+0)
}
 8f0:	c3 a0 00 00 	ret
